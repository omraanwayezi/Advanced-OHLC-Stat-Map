// To Do
// Fix the values changing throughout the day           -------- Should be fixed but haven't renewed my premium yet so I don't have replay so you need to just check
// Add option to use h4, weekly levels, daily levels    -------- Laid the foundation for it - structure might need a bit more work though cause wasn't built multi-timeframe but daily
// We need to make the table SEXY

//@version=5
indicator("Advanced OHLC", overlay=true, dynamic_requests = true)

/// INPUT VARIABLES {
// GENERAL SETTINGS {
group_lookback =                "Advanced OHLC » GENERAL SETTINGS"
show_historical =               input.bool(false, title = "Show Historical Sessions", tooltip = "Toggle Historical Lines & Labels", group = group_lookback)
lookback =                      input.int(60, title="Lookback Period", minval=1, tooltip="Defines the lookback period to calculate values - 60 by Default", group=group_lookback)
input_timeframe =               input.timeframe(defval='Default', title="Session Timeframe ", options=["Default", "Daily", "Weekly"], group=group_lookback)
//input_timeframe =               input.timeframe(defval='Default', title="Session Timeframe ", options=["Default", "4 Hour", "Daily", "Weekly", "Monthly", "Quarterly", "Yearly"], group=group_lookback)
// GENERAL SETTINGS_END }

// LINE SETTINGS {
group_lines =                   "Advanced OHLC » LINES SETTINGS"

manip_line_color =              input.color(color.red, title="Manipulation:  ", inline="manip", group=group_lines)
manip_line_style =              input.string("solid", title=" ", options=["solid", "dashed", "dotted"], inline="manip", group=group_lines)
manip_line_thickness =          input.int(1, title=" Width ", minval=1, maxval=4, inline="manip", group=group_lines)

dist_line_color =               input.color(color.gray, title="Distribution:    ", inline="dist", group=group_lines)
dist_line_style =               input.string("dotted", title=" ", options=["solid", "dashed", "dotted"], inline="dist", group=group_lines)
dist_line_thickness =           input.int(1, title=" Width ", minval=1, maxval=4, inline="dist", group=group_lines)

open_range_line_color =         input.color(color.orange, title="Opening Range:  ", inline="openrange", group=group_lines)
open_range_line_style =         input.string("dashed", title=" ", options=["solid", "dashed", "dotted"], inline="openrange", group=group_lines)
open_range_line_thickness =     input.int(1, title=" Width ", minval=1, maxval=4, inline="openrange", group=group_lines)
// LINE SETTINGS_END }

// EXTRA SETTINGS {
group_misc =                    "Advanced OHLC » OTHER SETTINGS"
show_labels =                   input.bool(true, title = "Show Labels ", tooltip = "Toggle Line Labels", inline="labels", group = group_misc)
label_size =                    input.string(size.normal, title = "Size: ", options = [size.tiny, size.small, size.normal, size.large, size.huge], inline="labels", group = group_misc)
show_debug_table =              input.bool(false, title="Show Debug Table", tooltip = "Toggle Debug Table", group = group_misc)
// EXTRA SETTINGS_END }
/// INPUT VARIABLES_END }

// INITIAL FUNCTIONS DECLARATION {

ConvertTimeframeInput(timeframe) =>
    switch timeframe
        "Default" => 
            string tf = 'D'
            // The code below automatically calculates a different kind of timeframe session
            // if timeframe.isseconds or (timeframe.isminutes and timeframe.multiplier <= 5)
            //     tf := '30'
            // else if timeframe.isminutes and timeframe.multiplier < 30
            //     tf := '240'
            // else if (timeframe.multiplier >= 30 and timeframe.multiplier < 240) and timeframe.isminutes
            //     tf := 'D'
            // else if (timeframe.multiplier >= 240 and timeframe.isminutes)
            //     tf := 'W'
            // else if (timeframe.isdaily and timeframe.multiplier >= 1)
            //     tf := 'M'
            // else if (timeframe.ismonthly)
            //     tf := '12M'
            // else
            //     tf := '3M'
            tf
        "4 Hour" => '240'
        "Daily" => 'D'
        "Weekly" => 'W'
        "Monthly" => 'M'
        "Quarterly" => '3M'
        "Yearly" => '12M'

// INITIAL FUNCTIONS DECLARATION_END }

/// FETCH OHLC DATA {
timeframe =         ConvertTimeframeInput(input_timeframe)
daily_open =        request.security(syminfo.tickerid, timeframe, open, lookahead=barmerge.lookahead_on, gaps=barmerge.gaps_off)
daily_high =        request.security(syminfo.tickerid, timeframe, high, lookahead=barmerge.lookahead_on, gaps=barmerge.gaps_off)
daily_low =         request.security(syminfo.tickerid, timeframe, low, lookahead=barmerge.lookahead_on, gaps=barmerge.gaps_off)
daily_close =       request.security(syminfo.tickerid, timeframe, close, lookahead=barmerge.lookahead_on, gaps=barmerge.gaps_off)
daily_time =        request.security(syminfo.tickerid, timeframe, time, lookahead=barmerge.lookahead_on, gaps=barmerge.gaps_off)
daily_time_close =  request.security(syminfo.tickerid, timeframe, time_close, lookahead=barmerge.lookahead_on, gaps=barmerge.gaps_off)
/// FETCH OHLC DATA_END }

/// LOOKBACK FUNCTIONS {
// Function to calculate average manipulation for the same weekday over the lookback period
calc_avg_manipulation(day_of_week, lookback) =>
    float manip = 0.0
    int count = 0
    for i = 0 to 999
        if dayofweek(daily_time[i]) == day_of_week
            if daily_close[i] > daily_open[i]  // Bullish day
                manip += math.abs(daily_open[i] - daily_low[i])  // Manipulation against the final direction
            else  // Bearish day
                manip += math.abs(daily_high[i] - daily_open[i])  // Manipulation against the final direction
            count += 1
        if count >= lookback
            break
    count > 0 ? manip / count : na  // Return average manipulation or na

// Function to calculate average distribution for the same weekday over the lookback period
calc_avg_distribution(day_of_week, lookback) =>
    float dist = 0.0
    int count = 0
    for i = 0 to 999
        if dayofweek(daily_time[i]) == day_of_week
            if daily_close[i] > daily_open[i]  // Bullish day
                dist += math.abs(daily_high[i] - daily_open[i])  // Distribution with the final direction (open to high)
            else  // Bearish day
                dist += math.abs(daily_open[i] - daily_low[i])  // Distribution with the final direction (open to low)
            count += 1
        if count >= lookback
            break
    count > 0 ? dist / count : na  // Return average distribution or na
/// LOOKBACK FUNCTIONS_END }

/// CALCULATE LEVELS {
// INITIALIZE PARAMETERS {
// Calculate manipulation and distribution levels on the daily timeframe
float open_level =              daily_open
float manip_up_level =          na
float manip_down_level =        na
float dist_up_level =           na
float dist_down_level =         na

// Initialize avg_manip and avg_dist with default values
var float avg_manip =           na
var float avg_dist =            na

// Declare levels as `var` so they retain their values until updated.\
float open_level_daily = open_level
var float manip_up_level_daily = na
var float manip_down_level_daily = na
var float dist_up_level_daily = na
var float dist_down_level_daily = na

// Detect the start of a new daily session based on daily time change
bool new_session_start =        open_level[1] != open_level
bool not_printed =              false
// INITIALIZE PARAMETERS_END }

// CALCULATE PARAMETERS {
// Calculate the values only at the start of a new session
if new_session_start
    current_day_of_week =               dayofweek(daily_time)

    if not not_printed
        not_printed :=                  true
        avg_manip :=                    request.security(syminfo.tickerid, timeframe,calc_avg_manipulation(current_day_of_week, lookback),lookahead=barmerge.lookahead_on, gaps=barmerge.gaps_off)
        avg_dist  :=                    request.security(syminfo.tickerid, timeframe,calc_avg_distribution(current_day_of_week, lookback),lookahead=barmerge.lookahead_on, gaps=barmerge.gaps_off)

        
    // Update levels using the daily open and calculated averages.
        if not na(avg_manip) and not na(avg_dist)
            manip_up_level_daily :=     open_level_daily + avg_manip
            manip_down_level_daily :=   open_level_daily - avg_manip
            dist_up_level_daily :=      open_level_daily + avg_dist
            dist_down_level_daily :=    open_level_daily - avg_dist


avg_manip :=                            na(avg_manip) ? avg_manip[1] : avg_manip
avg_dist  :=                            na(avg_dist)  ? avg_dist[1]  : avg_dist

// Update manipulation levels only if avg_manip is valid
if not na(avg_manip)
    manip_up_level   :=                 open_level + avg_manip
    manip_down_level :=                 open_level - avg_manip

// Update distribution levels only if avg_dist is valid
if not na(avg_dist)
    dist_up_level   :=                  open_level + avg_dist
    dist_down_level :=                  open_level - avg_dist

// CALCULATE PARAMETERS_END }
/// CALCULATE LEVELS }

//// LINES & LABELS {
// LINES & LABELS VARIABLES {
bool in_session =           new_session_start and not_printed

var line openLine =         na
var line manipUpLine =      na
var line manipDownLine =    na
var line distUpLine =       na
var line distDownLine =     na

var label openLabel =       na
var label manipUpLabel =    na
var label manipDownLabel =  na
var label distUpLabel =     na
var label distDownLabel =   na

// LINES & LABELS VARIABLES_END }
    
/// DRAW LINES & LABELS {
if (in_session)

// DELETE HISTORICAL LINES & LABELS {
    if not show_historical
        line.delete(openLine)
        line.delete(manipUpLine)
        line.delete(manipDownLine)
        line.delete(distUpLine)
        line.delete(distDownLine)
        label.delete(manipUpLabel)
        label.delete(manipDownLabel)
        label.delete(distUpLabel)
        label.delete(distDownLabel)
        label.delete(openLabel)
// DELETE HISTORICAL LINES & LABELS_END }


// DRAW LINES {
    openLine :=             line.new(x1 = daily_time,
                               y1 = open_level_daily,
                               x2 = daily_time_close,
                               y2 = open_level_daily,
                               xloc=xloc.bar_time,
                               color = open_range_line_color,
                               style = open_range_line_style == "solid" ? line.style_solid : open_range_line_style == "dashed" ? line.style_dashed : line.style_dotted,
                               width = open_range_line_thickness)

    manipUpLine :=          line.new(x1 = daily_time,
                               y1 = manip_up_level_daily,
                               x2 = daily_time_close,
                               y2 = manip_up_level_daily,
                               xloc=xloc.bar_time,
                               color = manip_line_color,
                               style = manip_line_style == "solid" ? line.style_solid : manip_line_style == "dashed" ? line.style_dashed : line.style_dotted,
                               width = manip_line_thickness)
    
    manipDownLine :=        line.new(x1 = daily_time,
                               y1 = manip_down_level_daily,
                               x2 = daily_time_close,
                               y2 = manip_down_level_daily,
                               xloc=xloc.bar_time,
                               color = manip_line_color,
                               style = manip_line_style == "solid" ? line.style_solid : manip_line_style == "dashed" ? line.style_dashed : line.style_dotted,
                               width = manip_line_thickness)
   
    distUpLine :=           line.new(x1 = daily_time,
                               y1 = dist_up_level_daily,
                               x2 = daily_time_close,
                               y2 = dist_up_level_daily,
                               xloc=xloc.bar_time,
                               color = dist_line_color,
                               style = dist_line_style == "solid" ? line.style_solid : dist_line_style == "dashed" ? line.style_dashed : line.style_dotted,
                               width = dist_line_thickness)
   
    distDownLine :=         line.new(x1 = daily_time,
                               y1 = dist_down_level_daily,
                               x2 = daily_time_close,
                               y2 = dist_down_level_daily,
                               xloc=xloc.bar_time,
                               color = dist_line_color,
                               style = dist_line_style == "solid" ? line.style_solid : dist_line_style == "dashed" ? line.style_dashed : line.style_dotted,
                               width = dist_line_thickness)
// DRAW LINES_END }
   
// DRAW LABELS {
    manipUpLabel :=         label.new(x = daily_time_close,
                               y = manip_up_level_daily,
                               text = "+M",
                               xloc=xloc.bar_time,
                               color = #00000000,
                               style = label.style_label_left,
                               textcolor = manip_line_color,
                               size = label_size, 
                               text_font_family=font.family_monospace)

    manipDownLabel :=       label.new(x = daily_time_close,
                               y = manip_down_level_daily,
                               text = "-M",
                               xloc=xloc.bar_time,
                               color = #00000000,
                               style = label.style_label_left,
                               textcolor = manip_line_color,
                               size = label_size, 
                               text_font_family=font.family_monospace)

    distUpLabel :=          label.new(x = daily_time_close,
                               y = dist_up_level_daily,
                               text = "+D",
                               xloc=xloc.bar_time,
                               color = #00000000,
                               style = label.style_label_left,
                               textcolor = dist_line_color,
                               size = label_size, 
                               text_font_family=font.family_monospace)

    distDownLabel :=        label.new(x = daily_time_close,
                               y = dist_down_level_daily,
                               text = "-D",
                               xloc=xloc.bar_time,
                               color = #00000000,
                               style = label.style_label_left,
                               textcolor = dist_line_color,
                               size = label_size, 
                               text_font_family=font.family_monospace)

    openLabel :=            label.new(x = daily_time_close,
                               y = open_level_daily,
                               text = "O",
                               xloc=xloc.bar_time,
                               color = #00000000,
                               style = label.style_label_left,
                               textcolor = open_range_line_color,
                               size = label_size, 
                               text_font_family=font.family_monospace)
// DRAW LABELS_END }
/// LINES & LABELS_END }
//// LINES & LABELS_END }

// DEBUG TABLE {
var table debugTable = table.new(position.top_right, 2, 13)

if (show_debug_table and barstate.islast)
    table.cell(debugTable, 0, 0, "Current Time:", bgcolor=color.blue, text_color=color.white)
    table.cell(debugTable, 1, 0, str.format("{0}:{1}", hour, minute), text_color=color.black)
    table.cell(debugTable, 0, 1, "Open Level:", bgcolor=color.blue, text_color=color.white)
    table.cell(debugTable, 1, 1, str.tostring(daily_open, "#.##"), text_color=color.black)
    table.cell(debugTable, 0, 2, "+MAN", bgcolor=color.blue, text_color=color.white)
    table.cell(debugTable, 1, 2, str.tostring(manip_up_level_daily, "#.##"), text_color=color.black)
    table.cell(debugTable, 0, 3, "-MAN", bgcolor=color.blue, text_color=color.white)
    table.cell(debugTable, 1, 3, str.tostring(manip_down_level_daily, "#.##"), text_color=color.black)
    table.cell(debugTable, 0, 4, "+DIST", bgcolor=color.blue, text_color=color.white)
    table.cell(debugTable, 1, 4, str.tostring(dist_up_level_daily, "#.##"), text_color=color.black)
    table.cell(debugTable, 0, 5, "-DIST", bgcolor=color.blue, text_color=color.white)
    table.cell(debugTable, 1, 5, str.tostring(dist_down_level_daily, "#.##"), text_color=color.black)
    table.cell(debugTable, 0, 6, "Daily Open Available:", bgcolor=color.blue, text_color=color.white)
    table.cell(debugTable, 1, 6, not na(daily_open) ? "Yes" : "No", text_color=color.black)
    table.cell(debugTable, 0, 7, "Daily Close Available:", bgcolor=color.blue, text_color=color.white)
    table.cell(debugTable, 1, 7, not na(daily_close) ? "Yes" : "No", text_color=color.black)
    table.cell(debugTable, 0, 8, "Asset Type:", bgcolor=color.blue, text_color=color.white)
    table.cell(debugTable, 1, 8, syminfo.type, text_color=color.black)

    // Add the day of the week to the debug table
    int current_day_of_week = dayofweek(time)  // Get the day of the week for the current bar
    table.cell(debugTable, 0, 9, "Day of Week:", bgcolor=color.blue, text_color=color.white)
    table.cell(debugTable, 1, 9, str.tostring(current_day_of_week), text_color=color.black)
    //find the recalculation trigger
    table.cell(debugTable, 0, 10, "Recalc Trigger:", bgcolor=color.blue, text_color=color.white)
    table.cell(debugTable, 1, 10, in_session ? "Yes" : "No", text_color=color.black)

    table.cell(debugTable, 0, 11, "avgmanip", bgcolor=color.blue, text_color=color.white)
    table.cell(debugTable, 1, 11, str.tostring(avg_manip, "#.##"), text_color=color.black)
    table.cell(debugTable, 0, 12, "avgdist", bgcolor=color.blue, text_color=color.white)
    table.cell(debugTable, 1, 12, str.tostring(avg_dist, "#.##"), text_color=color.black)
// DEBUG TABLE }
